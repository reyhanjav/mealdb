// Mocks generated by Mockito 5.2.0 from annotations
// in mealdb/test/bloc_test/bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mealdb/features/meals/domain/entity/category/category.dart'
    as _i5;
import 'package:mealdb/features/meals/domain/entity/meal/meal.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

import 'bloc_test.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeMeal_0 extends _i1.Fake implements _i2.Meal {}

/// A class which mocks [MealRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMealRepository extends _i1.Mock implements _i3.MealRepository {
  MockMealRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Meal>> listMeals(String? category) =>
      (super.noSuchMethod(Invocation.method(#listMeals, [category]),
              returnValue: Future<List<_i2.Meal>>.value(<_i2.Meal>[]))
          as _i4.Future<List<_i2.Meal>>);
  @override
  _i4.Future<_i2.Meal> getMealDetails(String? id) =>
      (super.noSuchMethod(Invocation.method(#getMealDetails, [id]),
              returnValue: Future<_i2.Meal>.value(_FakeMeal_0()))
          as _i4.Future<_i2.Meal>);
  @override
  _i4.Future<List<_i5.Category>> listCategories() =>
      (super.noSuchMethod(Invocation.method(#listCategories, []),
              returnValue: Future<List<_i5.Category>>.value(<_i5.Category>[]))
          as _i4.Future<List<_i5.Category>>);
}
